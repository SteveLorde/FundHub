// <auto-generated />
using System;
using FundHubAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FundHubAPI.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231221162728_categories")]
    partial class categories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FundHubAPI.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a858ba2-cc64-4752-973a-2b1acba5d78d"),
                            name = "Product"
                        },
                        new
                        {
                            Id = new Guid("fafaad46-3fbe-40ac-ad63-c311829668a4"),
                            name = "SocietalProject"
                        },
                        new
                        {
                            Id = new Guid("59cb7c8b-8e33-45d6-b066-214f3145a3c0"),
                            name = "EnvironmentProject"
                        });
                });

            modelBuilder.Entity("FundHubAPI.Data.Models.FundLogs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("accepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseLogs");
                });

            modelBuilder.Entity("FundHubAPI.Data.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("published")
                        .HasColumnType("date");

                    b.Property<string>("subtitle")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f97ea1d-e247-4cf5-a6d9-5f9d3265e220"),
                            description = "Desc Test",
                            image = "newscover.jpg",
                            published = new DateOnly(2024, 1, 1),
                            title = "Innovative Breakthroughs: College Students Secure Funding for Groundbreaking Projects"
                        },
                        new
                        {
                            Id = new Guid("1a55b12e-65b8-4542-b4c1-6676c30311e7"),
                            description = "Desc Test",
                            image = "newscover.jpg",
                            published = new DateOnly(2024, 1, 1),
                            title = "Empowering Tomorrow's Leaders: College Projects Receive Major Funding Boost"
                        },
                        new
                        {
                            Id = new Guid("93097c20-6558-4ed9-a27e-8bf07fb59b8a"),
                            description = "Desc Test",
                            image = "newscover.jpg",
                            published = new DateOnly(2024, 1, 1),
                            title = "From Campus to Capital: Student-Led Ventures Garner Investment for Impactful Initiatives"
                        },
                        new
                        {
                            Id = new Guid("598004de-bc37-4300-8271-3c1c0bb5c430"),
                            description = "Desc Test",
                            image = "newscover.jpg",
                            published = new DateOnly(2024, 1, 1),
                            title = "Shaping the Future: College Students' Ambitious Projects Win Substantial Funding"
                        });
                });

            modelBuilder.Entity("FundHubAPI.Data.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("currentfund")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("subtitle")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("totalfundrequired")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e4788cd-77a9-4b03-9412-385a482cf489"),
                            CategoryId = new Guid("59cb7c8b-8e33-45d6-b066-214f3145a3c0"),
                            UserId = new Guid("c0c343f3-a9d0-4ae6-93e4-0d1923b04e60"),
                            currentfund = 500,
                            description = "Description Test",
                            images = new[] { "1.jpg", "2.jpg" },
                            subtitle = "Subtitle Test",
                            title = "Greener Egypt",
                            totalfundrequired = 2000
                        },
                        new
                        {
                            Id = new Guid("694d6683-d3e6-4bc1-ab5d-f2f67f887332"),
                            CategoryId = new Guid("fafaad46-3fbe-40ac-ad63-c311829668a4"),
                            UserId = new Guid("c0c343f3-a9d0-4ae6-93e4-0d1923b04e60"),
                            currentfund = 500,
                            description = "Description Test",
                            images = new[] { "1.jpg", "2.jpg" },
                            subtitle = "Subtitle Test",
                            title = "My Super Awesome Health Machine",
                            totalfundrequired = 1000000
                        },
                        new
                        {
                            Id = new Guid("a9437a37-1d37-4a9b-adbd-a18ef0490942"),
                            CategoryId = new Guid("4a858ba2-cc64-4752-973a-2b1acba5d78d"),
                            UserId = new Guid("c0c343f3-a9d0-4ae6-93e4-0d1923b04e60"),
                            currentfund = 500,
                            description = "Description Test",
                            images = new[] { "1.jpg", "2.jpg" },
                            subtitle = "Subtitle Test",
                            title = "Electric Koshary Machine",
                            totalfundrequired = 120000
                        },
                        new
                        {
                            Id = new Guid("e9c8eccf-76aa-42d6-be67-803d8622c951"),
                            CategoryId = new Guid("4a858ba2-cc64-4752-973a-2b1acba5d78d"),
                            UserId = new Guid("c0c343f3-a9d0-4ae6-93e4-0d1923b04e60"),
                            currentfund = 500,
                            description = "Description Test",
                            images = new[] { "1.jpg", "2.jpg" },
                            subtitle = "Subtitle Test",
                            title = "Indie Egyptian Game",
                            totalfundrequired = 60000
                        });
                });

            modelBuilder.Entity("FundHubAPI.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("facebook")
                        .HasColumnType("text");

                    b.Property<string>("hashedpassword")
                        .HasColumnType("text");

                    b.Property<string>("instagram")
                        .HasColumnType("text");

                    b.Property<string>("pass_salt")
                        .HasColumnType("text");

                    b.Property<int?>("phonenumber")
                        .HasColumnType("integer");

                    b.Property<string>("profileimage")
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("usertype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("x_socialmedia")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0c343f3-a9d0-4ae6-93e4-0d1923b04e60"),
                            email = "test@gmail.com",
                            facebook = "",
                            phonenumber = 123456789,
                            profileimage = "profile.jpg",
                            username = "testuser",
                            usertype = "user"
                        });
                });

            modelBuilder.Entity("FundHubAPI.Data.Models.FundLogs", b =>
                {
                    b.HasOne("FundHubAPI.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FundHubAPI.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FundHubAPI.Data.Models.Project", b =>
                {
                    b.HasOne("FundHubAPI.Data.Models.Category", "category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FundHubAPI.Data.Models.User", "User")
                        .WithMany("projects")
                        .HasForeignKey("UserId");

                    b.Navigation("User");

                    b.Navigation("category");
                });

            modelBuilder.Entity("FundHubAPI.Data.Models.User", b =>
                {
                    b.Navigation("projects");
                });
#pragma warning restore 612, 618
        }
    }
}
